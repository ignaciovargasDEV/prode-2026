// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  nombre    String
  apellido  String
  area      String
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  predictions      Prediction[]
  userAchievements UserAchievement[]
  sessions         UserSession[]
  
  @@map("users")
}

model Team {
  id      String @id @default(cuid())
  name    String @unique
  country String
  flag    String?
  
  // Relaciones
  homeMatches Match[] @relation("HomeTeam")
  awayMatches Match[] @relation("AwayTeam")
  
  @@map("teams")
}

model Match {
  id               String     @id @default(cuid())
  fecha            DateTime
  homeTeamId       String
  awayTeamId       String
  homeGoals        Int?
  awayGoals        Int?
  fase             MatchPhase @default(GRUPOS)
  status           MatchStatus @default(PENDIENTE)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // Relaciones
  homeTeam    Team         @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam    Team         @relation("AwayTeam", fields: [awayTeamId], references: [id])
  predictions Prediction[]

  @@map("matches")
}

model Prediction {
  id                String   @id @default(cuid())
  userId            String
  matchId           String
  homeGoalsPredicted Int
  awayGoalsPredicted Int
  points            Int?     @default(0)
  comentario        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relaciones
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  // Un usuario solo puede hacer una predicci√≥n por partido
  @@unique([userId, matchId])
  @@map("predictions")
}

model Achievement {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String
  
  // Relaciones
  userAchievements UserAchievement[]
  
  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  
  // Relaciones
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  // Un usuario no puede desbloquear el mismo logro dos veces
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

enum MatchPhase {
  GRUPOS
  OCTAVOS
  CUARTOS
  SEMIFINAL
  TERCER_PUESTO
  FINAL
}

enum MatchStatus {
  PENDIENTE
  EN_PROGRESO
  FINALIZADO
  CANCELADO
}
